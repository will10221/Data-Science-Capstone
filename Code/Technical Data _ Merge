{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Technical Data and Merge**\n","### **Prepared by: Alex Cole**###\n","\n","### **Course**: MATH 479"],"metadata":{"id":"TnRi_-FQSwIc"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"aYEdfJnkjL8A"},"outputs":[],"source":["# !pip install yfinance\n","# !pip install stock-indicators\n","\n","import yfinance as yf\n","import pandas as pd\n","import math\n","import time\n","import matplotlib.pyplot as plt\n","from google.colab import files\n","from google.colab import drive\n","from datetime import datetime\n","from stock_indicators import indicators\n","from stock_indicators.indicators.common.quote import Quote"]},{"cell_type":"code","source":["## define ticker list and quote period ##\n","\n","tickers = ['AAPL','MSFT','AMZN','GOOGL','BRK-B','NVDA','TSLA','GOOG','XOM','UNH',\n","          'JPM','JNJ','META','V','HD','PG','MA','CVX','MRK','ABBV','LLY','BAC','AVGO',\n","          'PEP','PFE','KO','COST','TMO','CSCO','WMT','MCD','DIS','ABT','WFC','ACN','CMCSA',\n","          'ADBE','CRM','DHR','VZ','TXN','LIN','NKE','NFLX','PM','BMY','NEE','RTX','QCOM','T']\n","\n","period = '6mo'"],"metadata":{"id":"JL772QtbjTPc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## gather technical data ##\n","\n","t0 = time.time()\n","\n","sma_output = pd.DataFrame()\n","macd_output = pd.DataFrame()\n","rsi_output = pd.DataFrame()\n","adx_output = pd.DataFrame()\n","mfi_output = pd.DataFrame()\n","close_history = pd.DataFrame()\n","\n","for ticker in tickers:\n","    quote_df = yf.download(ticker, group_by=\"Ticker\", period=period).drop([\"Adj Close\"], axis=1).reset_index()\n","    \n","    quote = [\n","        Quote(d,o,h,l,c,v) \n","        for d,o,h,l,c,v \n","        in zip(quote_df['Date'], quote_df['Open'], quote_df['High'], quote_df['Low'], quote_df['Close'], quote_df['Volume'])\n","    ]\n","\n","    close_history[ticker] = quote_df[\"Close\"]\n","\n","    ### 20-Day SMA ###\n","    sma_list = []\n","    results = indicators.get_sma(quote, 20)\n","    for r in results:\n","        sma = float(r.sma or 0)\n","        sma_list.append(sma)\n","    \n","    if sma_output.empty:\n","        sma_output = pd.DataFrame(sma_list, columns=[ticker], index=quote_df[\"Date\"])\n","        \n","    else:\n","        sma_output[ticker] = sma_list\n","\n","    ## first 20 outputs are null as defined by period of moving average ##\n","        \n","        \n","    ### Moving Average Convergence / Divergence (MACD) ###\n","    macd_list = []\n","    results = indicators.get_macd(quote, 12, 26, 9)\n","    for r in results:\n","        macd = float(r.macd or 0)\n","        macd_list.append(macd)\n","    \n","    if macd_output.empty:\n","        macd_output = pd.DataFrame(macd_list, columns=[ticker], index=quote_df[\"Date\"])\n","        \n","    else:\n","        macd_output[ticker] = macd_list\n","\n","    ## first 26 outputs are null as defined by slow_periods, third argument of indicators function ##\n","\n","\n","    ### Relative Strength Index ###\n","    rsi_list = []\n","    results = indicators.get_rsi(quote, 14)\n","    for r in results:\n","        rsi = float(r.rsi or 0)\n","        rsi_list.append(rsi)\n","    \n","    if rsi_output.empty:\n","        rsi_output = pd.DataFrame(rsi_list, columns=[ticker], index=quote_df[\"Date\"])\n","        \n","    else:\n","        rsi_output[ticker] = rsi_list    \n","\n","    ## first 13 outputs are null as defined by lookback period-1 ##\n","\n","    \n","    ### Average Directional Index (ADX) ###\n","    adx_list = []\n","    results = indicators.get_adx(quote, 14)\n","    for r in results:\n","        adx = float(r.adx or 0)\n","        adx_list.append(adx)\n","    \n","    if adx_output.empty:\n","        adx_output = pd.DataFrame(adx_list, columns=[ticker], index=quote_df[\"Date\"])\n","        \n","    else:\n","        adx_output[ticker] = adx_list    \n","   \n","    ## first 27 outputs are null as defined by 2*lookback period-1 ##   \n","    \n","\n","    ### Money Flow Index (MFI) ###\n","    mfi_list = []\n","    results = indicators.get_mfi(quote, 14)\n","    for r in results:\n","        mfi = float(r.mfi or 0)\n","        mfi_list.append(mfi)\n","    \n","    if mfi_output.empty:\n","        mfi_output = pd.DataFrame(mfi_list, columns=[ticker], index=quote_df[\"Date\"])\n","        \n","    else:\n","        mfi_output[ticker] = mfi_list    \n","    ## first 14 outputs are null as defined by lookback period ##           \n","\n","close_history.set_index(quote_df[\"Date\"], inplace = True)     \n","#sma_output[19:]\n","#macd_output[26:]\n","#rsi_output[14:]\n","#adx_output[26:]\n","#mfi_output[14:]\n","\n","t1 = time.time()\n","print(\"Time: \" + str(t1 - t0) + \" Seconds\")"],"metadata":{"id":"VdxyDnYZjWel"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## library for technicals ##\n","\n","d = {}\n","variables = ['close', 'sma', 'macd', 'rsi', 'adx', 'mfi']\n","\n","for ticker in tickers:\n","    d[ticker] = pd.DataFrame(columns = variables, index = quote_df[\"Date\"])\n","    d[ticker]['close'] = close_history[ticker]    \n","    d[ticker]['sma'] = sma_output[ticker]\n","    d[ticker]['macd'] = macd_output[ticker]\n","    d[ticker]['rsi'] = rsi_output[ticker]\n","    d[ticker]['adx'] = adx_output[ticker]\n","    d[ticker]['mfi'] = mfi_output[ticker]\n","\n","    \n","print(d['AAPL'])"],"metadata":{"id":"q_TsbMNUjaaj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## library for sentiment ## \n","\n","s = {}\n","for ticker in tickers:\n","  df = pd.read_csv(dir_path+ticker+\"_tweets.csv\")\n","  timecode = []\n","  for i in df['Date']:\n","    time = datetime.strptime(i, \"%Y-%m-%d %X%z\")\n","    timecode.append(time.strftime(\"%Y-%m-%d\"))\n","  df['Date'] = timecode\n","  df = df.groupby('Date').mean()\n","  s[ticker] = df"],"metadata":{"id":"zKaRjHKsjeFI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## merge libraries ##\n","\n","t = {}\n","for ticker in tickers:\n","  t[ticker] = d[ticker].merge(s[ticker], how='left', on='Date')\n","  t[ticker]['sentiment_value'].fillna(0, inplace=True)"],"metadata":{"id":"2o8n4RrbjldD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## output to drive ##\n","\n","output_dir_path = \"/content/drive/MyDrive/Project_Group2/DataAll/\"\n","\n","for ticker in d:\n","  d[ticker].to_csv(output_dir_path+ticker+'.csv')"],"metadata":{"id":"kZfipX7hjm8D"},"execution_count":null,"outputs":[]}]}